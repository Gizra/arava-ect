<?php

/**
 * @file
 * Contains NegawattNormalizerMeterProcessTestCase
 */

class NegawattNormalizerMeterProcessTestCase extends NegawattWebTestCase {

  /**
   * Get test info.
   *
   * @return array
   *    test info
   */
  public static function getInfo() {
    return array(
      'name' => 'Normalizer process',
      'description' => 'Test the processing of raw data by normalizers.',
      'group' => 'Negawatt Normalizer',
    );
  }

  /**
   * Setup test environment.
   * Prepare meter nodes and raw data entities.
   */
  function setUp() {
    parent::setUp('negawatt_normalizer');

    $settings = array(
      'type' => 'iec_meter',
    );

    $meter_node1 = $this->drupalCreateNode($settings);
    $meter_node2 = $this->drupalCreateNode($settings);
    $meter_node3 = $this->drupalCreateNode($settings);
    $meter_node4 = $this->drupalCreateNode($settings);

    $this->meterNode1 = $meter_node1;
    $this->meterNode2 = $meter_node2;
    $this->meterNode3 = $meter_node3;
    $this->meterNode4 = $meter_node4;

    // @todo: Add frequency.
    // $wrapper = entity_metadata_wrapper('node', $meter_node);
    // $wrapper->field_meter_frequency-set();

    // Create the raw data.
    $values_info = array(
      array(
        // Two SATEC entries for hour 15:00.
        'type' => 'SATEC',
        'timestamp' => strtotime('2014-6-12 15:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'cumulative_kwh' => 10,
        'power_factor' => 0.90,
      ),
      array(
        'type' => 'SATEC',
        'timestamp' => strtotime('2014-6-12 15:01'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'cumulative_kwh' => 20,
        'power_factor' => 0.96,
      ),
      // One entry for meter 2, should not be read.
      array(
        'type' => 'SATEC',
        'timestamp' => strtotime('2014-6-12 15:01'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node2->nid,
        'cumulative_kwh' => 30,
        'power_factor' => 0.96,
      ),
      // IEC 4 rate-type entries for 2/2014.
      array(
        'type' => 'IEC',
        'timestamp' => strtotime('2014-2-1 12:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node3->nid,
        'cumulative_kwh' => 672,
        'power_factor' => 0.96,
      ),
      array(
        'type' => 'IEC',
        'timestamp' => strtotime('2014-2-1 12:00'),
        'rate_type' => 'low',
        'meter_nid' => $meter_node3->nid,
        'cumulative_kwh' => 1344,
        'power_factor' => 0.97,
      ),
      array(
        'type' => 'IEC',
        'timestamp' => strtotime('2014-2-1 12:00'),
        'rate_type' => 'mid',
        'meter_nid' => $meter_node3->nid,
        'cumulative_kwh' => 2016,
        'power_factor' => 0.98,
      ),
      array(
        'type' => 'IEC',
        'timestamp' => strtotime('2014-2-1 12:00'),
        'rate_type' => 'peak',
        'meter_nid' => $meter_node3->nid,
        'cumulative_kwh' => 2688,
        'power_factor' => 0.99,
      ),
      // Only two rate-types in the 3/2014
      array(
        'type' => 'IEC',
        'timestamp' => strtotime('2014-3-1 12:00'),
        'rate_type' => 'mid',
        'meter_nid' => $meter_node3->nid,
        'cumulative_kwh' => 744,
        'power_factor' => 0.91,
      ),
      array(
        'type' => 'IEC',
        'timestamp' => strtotime('2014-3-1 12:00'),
        'rate_type' => 'peak',
        'meter_nid' => $meter_node3->nid,
        'cumulative_kwh' => 1488,
        'power_factor' => 0.92,
      ),
      // Just to make sure, additional value that will not be read in the test
      array(
        'type' => 'IEC',
        'timestamp' => strtotime('2014-4-1 12:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node3->nid,
        'cumulative_kwh' => 1234,
        'power_factor' => 0.92,
      ),
      // And another value for meter 4
      array(
        'type' => 'IEC',
        'timestamp' => strtotime('2014-2-1 12:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node4->nid,
        'cumulative_kwh' => 7896,
        'power_factor' => 0.92,
      ),
    );

    foreach ($values_info as $values) {
      $entity = entity_create('electricity_raw', $values);
      $entity->save();
    }
  }

  /**
   * Test processing a SATEC meter.
   * - @todo: Test meter with wrong frequency
   * - Test meter with empty data
   * - Test meter with valid data.
   * - Test that the using same timestamp, nid returns an existing entity.
   * - Test that adding raw data and calling process again returns proper values.
   */
  function testProcessSatecMeter() {

    $handler = negawatt_normalizer_get_electricity_normalizer_handler('satec');

    // Call process() with no raw data.
    $result_entities = $handler->process($this->meterNode1, \ElectricityNormalizerInterface::HOUR, strtotime('2014-3-1 12:00'), array('flat'));

    // Should be empty array.
    // @todo: We have to decide if we return NULL here or some kind of an empty entity
    $this->assertTrue(is_array($result_entities) && empty($result_entities), 'process() with no data returns an empty array.');

    // Create a new normalized entity and check its validity.
    $result_entities = $handler->process($this->meterNode1, \ElectricityNormalizerInterface::HOUR, strtotime('2014-6-12 16:00'), array('flat'));

    $this->assertTrue(is_array($result_entities) && count($result_entities) == 1, 'process() returns an array with one object.');
    $result_entity = $result_entities[0];

    $id = $result_entity->id;

    $this->assertEqual($result_entity->type, \ElectricityNormalizerInterface::HOUR, '<b>Testing SATEC normalizer</b><br>Entity type is correct.');
    $this->assertEqual($result_entity->timestamp, strtotime('2014-6-12 15:00'), 'Processed timestamp is correct.');
    $this->assertEqual($result_entity->meter_nid, 1, 'Meter nid is correct.');
    $this->assertEqual($result_entity->avg_power, 600, 'Average power calculation was correct.');
    // Problem with float representation prevent the exact value of 0.9
    $this->assertTrue(abs($result_entity->min_power_factor - 0.90) < 0.0001, 'Min power-factor calculation was correct.');

    // Add new entity to electricity raw table.
    $values = array(
      'type' => 'SATEC',
      'timestamp' => strtotime('2014-6-12 15:04'),
      'rate_type' => 'flat',
      'meter_nid' => $this->meterNode1->nid,
      'cumulative_kwh' => 30,
      // Supply a new minimal power factor of 0.89 (previous value as 0.90).
      'power_factor' => 0.89,
    );
    $entity = entity_create('electricity_raw', $values);
    $entity->save();

    // Use same process params again.
    $result_entities = $handler->process($this->meterNode1, \ElectricityNormalizerInterface::HOUR, strtotime('2014-6-12 16:00'), array('flat'));
    $result_entity = $result_entities[0];

    // Make sure the same normalized entity is returned.
    $this->assertEqual($result_entity->id, $id, '<b>Second call to process().</b><br>The existing electricity entity is used.');

    // Check that the values were updated after new entry.
    $this->assertEqual($result_entity->type, \ElectricityNormalizerInterface::HOUR, 'Entity type is correct.');
    $this->assertEqual($result_entity->timestamp, strtotime('2014-6-12 15:00'), 'Processed timestamp is correct.');
    $this->assertEqual($result_entity->meter_nid, 1, 'Meter nid is correct.');
    $this->assertEqual($result_entity->avg_power, 300, 'Average power calculation was correct.');
    $this->assertTrue(abs($result_entity->min_power_factor - 0.89) < 0.0001, 'Min power-factor calculation was correct.');
  }

  /**
   * Test processing an IEC meter.
   * - @todo: Test meter with wrong frequency
   * - Test meter with empty data
   * - Test meter with valid data.
   * - Test that the using same timestamp, nid returns an existing entity.
   * - Test that changing raw data and calling process again returns proper values.
   * - Test several rate-types
   */
  function testProcessIecMeter() {

    $handler = negawatt_normalizer_get_electricity_normalizer_handler('iec');

    // Call process() with frequency lower then MONTH, should raise an Exception.
    $message = '<b>Testing IEC normalizer.</b><br>Calling process() with frequency lower than MONTH.';
    try {
      $handler->process($this->meterNode3, \ElectricityNormalizerInterface::DAY, strtotime('2014-3-1 12:00'), array('low'));
      $this->fail($message);
    }
    catch(Exception $e) {
      $this->pass($message);
    }

    // Call process() with no raw data, but with rate-type, should return an tmpty array.
    $result_entities = $handler->process($this->meterNode3, \ElectricityNormalizerInterface::MONTH, strtotime('2013-5-1 12:00'), array('low'));
    $this->assertTrue(is_array($result_entities) && empty($result_entities), 'Calling process() with no raw data (with rate-type), returns empty array.');

    // Call process() with no raw data, but without rate-type, should return emtpy array.
    $result_entities = $handler->process($this->meterNode3, \ElectricityNormalizerInterface::MONTH, strtotime('2013-5-1 12:00'));
    $this->assertTrue(is_array($result_entities) && empty($result_entities), 'Calling process() with no raw data (without rate-type), returns emtpy array.');

    // Create a new normalized entity and check its validity.
    $result_entities = $handler->process($this->meterNode3, \ElectricityNormalizerInterface::MONTH, strtotime('2014-3-1 12:00'), array('low'));

    $this->assertTrue(is_array($result_entities) && count($result_entities) == 1, 'process() returns an array with one object.');
    $result_entity = $result_entities[0];

    $id = $result_entity->id;

    $this->assertEqual($result_entity->type, \ElectricityNormalizerInterface::MONTH, 'Entity type is correct.');
    $this->assertEqual($result_entity->timestamp, strtotime('2014-2-1 12:00'), 'Processed timestamp is correct.');
    $this->assertEqual($result_entity->meter_nid, 3, 'Meter nid is correct.');
    $this->assertEqual($result_entity->avg_power, 2, 'Average power calculation was correct.');
    $this->assertTrue(abs($result_entity->min_power_factor - 0.97) < 0.0001, 'Min power-factor calculation was correct.');

    // Modify an entity in electricity raw table.
    $entity = entity_load('electricity_raw', array(5));
    $entity = $entity[5];
    $entity->cumulative_kwh = 3360;
    $entity->power_factor = 0.90;
    $entity->save();

    // Use same process params again.
    $result_entities = $handler->process($this->meterNode3, \ElectricityNormalizerInterface::MONTH, strtotime('2014-3-1 12:00'), array('low'));
    $result_entity = $result_entities[0];

    // Make sure the same normalized entity is returned.
    $this->assertEqual($result_entity->id, $id, '<b>Second call to process().</b><br>The existing electricity entity is used.');

    // Check that the values were updated after new entry.
    $this->assertEqual($result_entity->type, \ElectricityNormalizerInterface::MONTH, 'Entity type is correct.');
    $this->assertEqual($result_entity->timestamp, strtotime('2014-2-1 12:00'), 'Processed timestamp is correct.');
    $this->assertEqual($result_entity->meter_nid, 3, 'Meter nid is correct.');
    $this->assertEqual($result_entity->avg_power, 5, 'Average power calculation was correct.');
    $this->assertTrue(abs($result_entity->min_power_factor - 0.90) < 0.0001, 'Min power-factor calculation was correct.');

    // Call process() without rate-type.
    $result_entities = $handler->process($this->meterNode3, \ElectricityNormalizerInterface::MONTH, strtotime('2014-3-1 12:00'));

    // Should return an array of 4 objects.
    $this->assertTrue(is_array($result_entities) && count($result_entities) == 4,
      '<b>Testing process without rate-type.</b><br>Process() returned an array with 4 items.');
    $this->assertTrue($result_entities[0] instanceof \Electricity, 'Items are objects of class Electricity.');

    // Make sure the same normalized entity is returned for low rate.
    $this->assertEqual($result_entities[2]->rate_type, \ElectricityNormalizerBase::LOW, 'The 3rd array element has rate type "low".');
    $this->assertEqual($result_entities[2]->id, $id, 'The existing electricity entity is used for "low" rate.');

    // Check that the values for the 3rd entity are correct.
    $this->assertEqual($result_entities[2]->type, \ElectricityNormalizerInterface::MONTH, 'Entity type is correct.');
    $this->assertEqual($result_entities[2]->timestamp, strtotime('2014-2-1 12:00'), 'Processed timestamp is correct.');
    $this->assertEqual($result_entities[2]->meter_nid, 3, 'Meter nid is correct.');
    $this->assertEqual($result_entities[2]->avg_power, 5, 'Average power calculation was correct.');
    $this->assertTrue(abs($result_entities[2]->min_power_factor - 0.90) < 0.0001, 'Min power-factor calculation was correct.');

    // Call process() without rate-type, only 2 entries for the 3/2014.
    $result_entities = $handler->process($this->meterNode3, \ElectricityNormalizerInterface::MONTH, strtotime('2014-4-1 12:00'));

    // Should return an array of 2 objects.
    $this->assertTrue(is_array($result_entities) && count($result_entities) == 2,
      '<b>Testing process with rate-type, only 2 rate-types this time.</b><br>Process() returned an array with 2 items.');
    $this->assertTrue($result_entities[0] instanceof \Electricity, 'Items are objects of class Electricity.');

    // Check that the values for the 3rd entity are correct.
    $this->assertEqual($result_entities[0]->type, \ElectricityNormalizerInterface::MONTH, 'Entity type is correct.');
    $this->assertEqual($result_entities[0]->timestamp, strtotime('2014-3-1 12:00'), 'Processed timestamp is correct.');
    $this->assertEqual($result_entities[0]->meter_nid, 3, 'Meter nid is correct.');
    $this->assertEqual($result_entities[0]->rate_type, 'peak', 'Rate-type is correct.');
    $this->assertTrue(abs($result_entities[0]->avg_power - 2) < 0.01, 'Average power calculation was correct.');
    $this->assertTrue(abs($result_entities[0]->min_power_factor - 0.92) < 0.0001, 'Min power-factor calculation was correct.');

  }
}
