<?php

/**
 * @file
 * Contains NegawattNormalizerMeterProcessTestCase
 */

class NegawattRestfulTestCase extends NegawattWebTestCase {

  /**
   * Get test info.
   *
   * @return array
   *    test info
   */
  public static function getInfo() {
    return array(
      'name' => 'Restful API',
      'description' => 'Test the restful API for negawatt-server.',
      'group' => 'Negawatt',
    );
  }

  /**
   * Prepare accounts, OG-vocabularies, and taxonomy-terms.
   *
   * @throws OgVocabException
   */
  function setUpCategories() {
    // Create two OG account nodes.
    $settings = array(
      'type' => 'account',
      OG_GROUP_FIELD => array('und' => array('0' => array('value' => 1))),
    );
    $account_node1 = $this->drupalCreateNode($settings);

    $settings[OG_GROUP_FIELD] = array('und' => array('0' => array('value' => 2)));
    $account_node2 = $this->drupalCreateNode($settings);

    // Create vocabularies and OG_Vocabs
    // Create a new vocabulary
    $vocabulary1 = (object) array(
      'name' => 'Meter categories for account 1',
      'machine_name' => 'meter_category_account1',
    );
    taxonomy_vocabulary_save($vocabulary1);

    // Create an OG-vocab and relate new vocabulary with OG.
    $og_vocab_settings = array(
      'cardinality' => 1,
      'required' => FALSE,
    );
    // Create og-vocabulary for meter types.
    $og_vocab = og_vocab_create_og_vocab($vocabulary1->vid, 'node', 'iec_meter', OG_VOCAB_FIELD, $og_vocab_settings);
    $og_vocab->save();
    $og_vocab = og_vocab_create_og_vocab($vocabulary1->vid, 'node', 'satec_meter', OG_VOCAB_FIELD, $og_vocab_settings);
    $og_vocab->save();

    og_vocab_relation_save($vocabulary1->vid, 'node', 1/*account id*/);

    // Create second vocabulary
    $vocabulary2 = (object) array(
      'name' => 'Meter categories for account 2',
      'machine_name' => 'meter_category_account2',
    );
    taxonomy_vocabulary_save($vocabulary2);

    // Create og-vocabulary for meter types.
    $og_vocab = og_vocab_create_og_vocab($vocabulary2->vid, 'node', 'iec_meter', OG_VOCAB_FIELD, $og_vocab_settings);
    $og_vocab->save();
    $og_vocab = og_vocab_create_og_vocab($vocabulary2->vid, 'node', 'satec_meter', OG_VOCAB_FIELD, $og_vocab_settings);
    $og_vocab->save();

    og_vocab_relation_save($vocabulary2->vid, 'node', 2/*account id*/);

    // Attach taxonomy-term fields to the bundles.
    negawatt_meter_field_attach_create_bundle('taxonomy_term', 'meter_category_account1');
    negawatt_meter_field_attach_create_bundle('taxonomy_term', 'meter_category_account2');

    // Create several meter-categories.
    $values = array(
      'vid' => $vocabulary1->vid,
      'name' => 'account1 school',
      'vocabulary_machine_name' => $vocabulary1->machine_name,
    );
    $term = entity_create('taxonomy_term', $values);
    $wrapper = entity_metadata_wrapper('taxonomy_term', $term);
    $wrapper->field_match_strings->set('בית ספר|בי"ס');
    $wrapper->save();

    $values['name'] = 'אחר';
    $term = entity_create('taxonomy_term', $values);
    entity_save('taxonomy_term', $term);

    $values['vid'] = $vocabulary2->vid;
    $term = entity_create('taxonomy_term', $values);
    entity_save('taxonomy_term', $term);

    $this->account_node1 = $account_node1;
    $this->account_node2 = $account_node2;
  }

  /**
   * Setup test environment.
   * Prepare meter nodes and raw data entities.
   */
  function setUp() {
    parent::setUp('negawatt_restful');

    $this->setUpCategories();

    // Create satec meter nodes.
    $settings = array(
      'type' => 'satec_meter',
      'field_max_frequency' => array('und' => array('0' => array('value' => \NegaWattNormalizerTimeManagerInterface::MINUTE))),
      'field_meter_id' => array('und' => array('0' => array('value' => 1))),
      'field_place_address' => array('und' => array('0' => array('value' => 'לכיש 25'))),
      'field_place_description' => array('und' => array('0' => array('value' => 'בי"ס ויצמן'))),
      'field_place_locality' => array('und' => array('0' => array('value' => 'קרית גת'))),
      OG_AUDIENCE_FIELD => array('und' => array('0' => array('target_id' => 1))),
    );

    $meter_node1 = $this->drupalCreateNode($settings);
    $meter_node2 = $this->drupalCreateNode($settings);

    // Create IEC meter nodes.
    $settings = array(
      'type' => 'iec_meter',
      'field_max_frequency' => array('und' => array('0' => array('value' => \NegaWattNormalizerTimeManagerInterface::MONTH))),
      'field_place_address' => array('und' => array('0' => array('value' => 'לכיש 25'))),
      'field_place_description' => array('und' => array('0' => array('value' => 'בי"ס ויצמן'))),
      'field_place_locality' => array('und' => array('0' => array('value' => 'קרית גת'))),
      OG_AUDIENCE_FIELD => array('und' => array('0' => array('target_id' => 1))),
    );

    $meter_node3 = $this->drupalCreateNode($settings);

    $settings['field_place_description'] = array('und' => array('0' => array('value' => 'תיאור לא ברור')));
    $meter_node4 = $this->drupalCreateNode($settings);

    // Save nodes for later.
    $this->meterNode1 = $meter_node1;
    $this->meterNode2 = $meter_node2;
    $this->meterNode3 = $meter_node3;
    $this->meterNode4 = $meter_node4;

    // Create the raw data.
    $values_info = array(
      array(
        // Two SATEC entries for hour 15:00.
        'type' => \NegaWattNormalizerTimeManagerInterface::MINUTE,
        'timestamp' => strtotime('2014-6-12 15:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 2,
        'sum_kwh' => 1440,
        'min_power_factor' => 0.90,
      ),
      array(
        'type' => \NegaWattNormalizerTimeManagerInterface::MINUTE,
        'timestamp' => strtotime('2014-6-12 15:15'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 3,
        'sum_kwh' => 2160,
        'min_power_factor' => 0.96,
      ),
      // One entry at 16:00, should not be read when processing 15:00-16:00
      array(
        'type' => \NegaWattNormalizerTimeManagerInterface::MINUTE,
        'timestamp' => strtotime('2014-6-12 16:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 2,
        'sum_kwh' => 1440,
        'min_power_factor' => 0.96,
      ),
      // Hourly entries
      array(
        'type' => \NegaWattNormalizerTimeManagerInterface::HOUR,
        'timestamp' => strtotime('2014-6-12 15:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 2,
        'sum_kwh' => 1440,
        'min_power_factor' => 0.96,
      ),
      array(
        'type' => \NegaWattNormalizerTimeManagerInterface::HOUR,
        'timestamp' => strtotime('2014-6-12 16:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 2,
        'sum_kwh' => 1440,
        'min_power_factor' => 0.96,
      ),
      // Daily entries
      array(
        'type' => \NegaWattNormalizerTimeManagerInterface::DAY,
        'timestamp' => strtotime('2014-6-12 00:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 2,
        'sum_kwh' => 2000,
        'min_power_factor' => 0.96,
      ),
      // One entry for meter 2, should not be read.
      array(
        'type' => \NegaWattNormalizerTimeManagerInterface::MINUTE,
        'timestamp' => strtotime('2014-6-12 15:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node2->nid,
        'avg_power' => 4,
        'sum_kwh' => 1440,
        'min_power_factor' => 0.96,
      ),
    );

    foreach ($values_info as $values) {
      $entity = entity_create('electricity', $values);
      $entity->save();
    }
  }

  /**
   * Test 'meters' API.
   * - Should give both satec and iec meters.
   * - Max-frequency field should show.
   * - Meter-category field should list the entire category hierarchy.
   * - Particular satec and iec meters' fields will appear.
   */
  function testMetersApi() {

    $handler = restful_get_restful_handler('satec_meters');
    $response = $handler->get();

    // There should be 2 meters
    $this->assertTrue(is_array($response) && count($response) == 2, 'Two SATEC meters were found.');
    $meter = $response[0];
    $this->assertEqual($meter['type'], 'satec_meter', 'Meter type is correct.');
    $this->assertEqual($meter['max_frequency'], 5, 'Max-frequency field is correct.');
    $this->assertEqual($meter['meter_id'], 1, 'Meter ID field is correct.');

    $handler = restful_get_restful_handler('iec_meters');
    $response = $handler->get();
    $this->assertTrue(is_array($response) && count($response) == 2, 'Two IEC meters were found.');

    // Test meter category.
    $meter = $response[0];
    $this->assertEqual($meter['meter_categories'][1]['id'], 1, 'Meter 3 category field is correct.');
    $meter = $response[1];
    $this->assertEqual($meter['meter_categories'][2]['id'], 2, 'Meter 4 category field (other) is correct.');

    // Test POST request

    $handler = restful_get_restful_handler('iec_meters');

    // Create a new meter
    $request = array(
      'label' =>'4135364-604-1536093',
      'account' => 2,
      'contract' => 4135364,
      'place_address' => 'דרבן 6',
      'place_description' => '',
      'place_locality' => 'אילת',
      'meter_code' => 604,
      'meter_serial' => 1536093,
      'max_frequency' => 2,
    );
    $result = $handler->post('', $request);
    $id = $result[0]['id'];
    $this->assertEqual($result[0]['label'], '4135364-604-1536093', '<b>Testing POST request</b><br>Meter created successfuly.');
    $this->assertEqual($result[0]['max_frequency'], 2, 'max_frequency field is OK.');

    $request['max_frequency'] = 5;
    $result = $handler->post('', $request);

    $this->assertEqual($result[0]['id'], $id, 'Meter update successful.');
    $this->assertEqual($result[0]['max_frequency'], 5, 'Meter max_frequency was updated.');

    // @todo: Test 'meters' API call
    // @todo: Test that both satec and iec meters are returned.
  }

  /**
   * Test 'electricity' API.
   * - Should sum values.
   * - Test filter by type.
   * - Test filter by meter-category - should filter values from child categories
   *   as well - e.g. if filtering by category 5 (edu), should show values related
   *   to categories 6 (kindergarten) and 7 (schools).
   */
  function testElectricityApi() {

    $handler = restful_get_restful_handler('electricity');
    $response = $handler->get('', array('filter' => array('meter_account' => 1)));

    // There should be 6 entities (due to sum over meters).
    $this->assertTrue(is_array($response) && count($response) == 6, '<b>Testing electricity API</b><br>6 entities were found.');
    $entity = $response[0];
    $this->assertEqual($entity['type'], NegaWattNormalizerTimeManagerInterface::DAY, 'Entity 0 is of type DAY.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12'), 'Entity timestamp is correct.');
    $this->assertEqual($entity['kwh'], 2000, 'Entity kWh is correct.');
    $entity = $response[1];
    $this->assertEqual($entity['type'], NegaWattNormalizerTimeManagerInterface::HOUR, 'Entity 1 is of type HOUR.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12 15:00'), 'Entity timestamp is correct.');
    $entity = $response[2];
    $this->assertEqual($entity['type'], NegaWattNormalizerTimeManagerInterface::MINUTE, 'Entity 2 is of type MINUTE.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12 15:00'), 'Entity timestamp is correct.');
    $this->assertEqual($entity['kwh'], 2880, 'Entity kWh is correct.');
    $this->assertEqual($entity['avg_power'], 3, 'Entity avg-power is correct.');
    $entity = $response[4];
    $this->assertEqual($entity['type'], NegaWattNormalizerTimeManagerInterface::HOUR, 'Entity 4 is of type HOUR.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12 16:00'), 'Entity timestamp is correct.');

    // @todo: Add test for summation of kWh of different meters. For that we
    // need to get the data from a database.

    // Test filter on type=2 (MONTH)
    $response = $handler->get('', array('filter' => array('meter_account' => 1, 'type' => 4)));
    // There should be 2 entities.
    $this->assertTrue(is_array($response) && count($response) == 2, '<b>Testing electricity with filter for type=MONTH</b><br>2 entities were found.');
    $entity = $response[0];
    $this->assertEqual($entity['type'], NegaWattNormalizerTimeManagerInterface::HOUR, 'Entity 0 is of type HOUR.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12 15:00'), 'Entity timestamp is correct.');
    $entity = $response[1];
    $this->assertEqual($entity['type'], NegaWattNormalizerTimeManagerInterface::HOUR, 'Entity 1 is of type HOUR.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12 16:00'), 'Entity timestamp is correct.');

    // @todo: Add tests for filter by category.
  }
}
